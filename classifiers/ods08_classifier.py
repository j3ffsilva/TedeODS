from classifiers.base_classifier import BaseODSClassifier

class ODS08Classifier(BaseODSClassifier):
    def __init__(self):
        super().__init__(8)

    def get_padroes(self):
        return [
            r'crescimento\s*econ[ôo]mico',
            r'pol[íi]tica\s*de\s*desenvolvimento\s*econ[ôo]mico',
            r'pol[íi]tica\s*de\s*emprego',
            r'crescimento\s*econ[ôo]mico\s*inclusivo',
            r'crescimento\s*sustent[áa]vel',
            r'desenvolvimento\s*econ[ôo]mico',
            r'globaliza[çc][ãa]o\s*econ[ôo]mica',
            r'produtividade\s*econ[ôo]mica',
            r'economia\s*de\s*baixo\s*carbono',
            r'crescimento\s*inclusivo',
            r'microcr[ée]dito\w*',
            r'renda\s*igual',
            r'sal[áa]rios\s*iguais',
            r'emprego[s]?\s*decente[s]?',
            r'emprego[s]?\s*de\s*qualidade',
            r'cria[çc][ãa]o\s*de\s*emprego',
            r'pleno\s*emprego',
            r'prote[çc][ãa]o\s*do\s*emprego',
            r'emprego[s]?\s*informal[es]?',
            r'emprego[s]?\s*prec[áa]rio[s]?',
            r'desemprego',
            r'trabalho[s]?\s*prec[áa]rio[s]?',
            r'microempresa\w*',
            r'pequena\s*empresa',
            r'm[ée]dia empresa',
            r'pequenas\s*empresas',
            r'm[ée]dias\s*empresas',
            r'pequeno[s]?\s*empres[áa]rio[s]?',
            r'empres[áa]rio[s]?\s*iniciante[s]?',
            r'm[ée]dio[s]?\s*empres[áa]rio[s]?',
            r'pequeno[s]?\s*empreendedor[es]?',
            r'm[ée]dio[s]?\s*empreendedor[es]?',
            r'empreendedor[es]?\s*iniciante[s]?',
            r'empreendedorismo\s*social',
            r'ambiente\s*de\s*trabalho\s*seguro',
            r'institui[çc][ãa]o\s*do\s*mercado\s*de\s*trabalho',
            r'institui[çc][õo]es\s*do\s*mercado\s*de\s*trabalho',
            r'trabalho\s*for[çc]ado',
            r'trabalho\s*infantil',
            r'direito[s]?\s*trabalhista[s]?',
            r'escravid[ãa]o\s*moderna',
            r'tr[áa]fico\s*de\s*pessoas',
            r'crianc[aã]-soldado',
            r'crian[çc]as-soldado',
            r'emprego[s]?\s*global[es]?',
            r'sal[áa]rio\s*m[íi]nimo',
            r'economia\s*circular',
            r'economia\s*inclusiva',
            r'economia\s*rural',
            r'investimento\s*de\s*desenvolvimento\s*estrangeiro',
            r'ajuda\s*ao\s*com[ée]rcio',
            r'sindicatos?',
            r'trabalhadores\s*pobres',
            r'n[ãa]o\s*est[áa]\s*em\s*educa[çc][ãa]o,\s*emprego\s*ou\s*treinamento',
            r'compensa[çc][ãa]o\s*de\s*carbono',
            r'projeto[s]?\s*de\s*compensa[çc][ãa]o',
            r'diversifica[çc][ãa]o\s*econ[ôo]mica',
            r'pegada\s*material',
            r'efici[êe]ncia\s*de\s*recursos',
            r'ber[çc]o\s*ao\s*ber[çc]o.*economia',
            r'dissocia[çc][ãa]o\s*econ[ôo]mica',
            r'disparidades\s*do\s*mercado\s*de\s*trabalho',
            r'turismo\s*sustent[áa]vel',
            r'ecoturismo',
            r'turismo\s*baseado\s*na\s*comunidade',
            r'emprego\s*no\s*turismo',
            r'pol[íi]tica\s*de\s*turismo\s*sustent[áa]vel',
            r'acesso\s*financeiro',
            r'inclus[ãa]o\s*financeira',
            r'acesso\s*a\s*servi[çc]os\s*banc[áa]rios'
        ]
    
    def get_excecoes(self):
        """Define padrões de exclusão."""
        return r''