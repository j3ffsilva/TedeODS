{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import styled from 'styled-components';\n\n// // Estilos para o wrapper da busca e header\n// const SearchWrapper = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n//   justify-content: center;\n//   margin-top: 150px;  /* Adiciona espaço para que a barra não fique atrás do header */\n// `;\n\n// const SearchInput = styled.input`\n//   width: 600px;\n//   padding: 15px;\n//   font-size: 18px;\n//   border: 2px solid #ddd;\n//   border-radius: 24px;\n//   margin-bottom: 20px;\n// `;\n\n// const SearchButton = styled.button`\n//   padding: 10px 20px;\n//   background-color: #4285f4;\n//   color: white;\n//   border: none;\n//   border-radius: 24px;\n//   cursor: pointer;\n//   font-size: 16px;\n//   margin-bottom: 20px;\n\n//   &:hover {\n//     background-color: #357ae8;\n//   }\n// `;\n\n// const ResultsWrapper = styled.div`\n//   width: 600px;\n//   margin-top: 20px;\n//   padding: 20px;\n//   border: 1px solid #ddd;\n//   border-radius: 10px;\n// `;\n\n// const ResultItem = styled.div`\n//   margin-bottom: 20px;\n//   border: 1px solid #ddd;\n//   border-radius: 5px;\n//   padding: 15px;\n// `;\n\n// const Nome = styled.h2`\n//   color: #1a73e8;\n//   margin: 0;\n// `;\n\n// const Descricao = styled.p`\n//   font-size: 14px;\n//   color: #333;\n// `;\n\n// const Data = styled.span`\n//   font-size: 12px;\n//   color: #777;\n// `;\n\n// const Keyword = styled.span`\n//   display: inline-block;\n//   background-color: ${props => props.color || '#f1f3f4'};  /* Cor dinâmica para cada tag */\n//   padding: 5px 10px;\n//   border-radius: 15px;\n//   margin-right: 5px;\n//   margin-bottom: 5px;\n//   font-size: 12px;\n//   cursor: pointer;\n//   color: white;\n\n//   &:hover {\n//     opacity: 0.8;\n//   }\n// `;\n\n// const SuggestionsList = styled.ul`\n//   list-style-type: none;\n//   padding: 0;\n//   margin-top: -10px;\n//   background-color: #fff;\n//   width: 600px;\n//   border: 1px solid #ddd;\n//   border-radius: 8px;\n//   max-height: 200px;\n//   overflow-y: auto;\n// `;\n\n// const SuggestionItem = styled.li`\n//   padding: 10px;\n//   cursor: pointer;\n//   &:hover {\n//     background-color: #f1f1f1;\n//   }\n// `;\n\n// function SearchBar() {\n//   const [query, setQuery] = useState('');\n//   const [pioneers, setPioneers] = useState([]);\n//   const [filteredPioneers, setFilteredPioneers] = useState([]);\n//   const [suggestions, setSuggestions] = useState([]);\n//   const [randomKeywords, setRandomKeywords] = useState([]);\n\n//   const colors = ['#34a853', '#ea4335', '#fbbc05', '#4285f4', '#f39c12'];  // Lista de cores para as tags\n\n//   // Carregar dados do JSON local\n//   useEffect(() => {\n//     fetch('/data/computing_pioneers.json')\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Erro ao carregar o arquivo JSON');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setPioneers(data.pioneers);\n//         generateRandomKeywords(data.pioneers);  // Gera palavras-chave a partir do JSON\n//       })\n//       .catch((error) => {\n//         console.error('Error loading JSON:', error);\n//       });\n//   }, []);\n\n//   // Função para gerar palavras-chave aleatórias a partir dos pioneiros\n//   const generateRandomKeywords = (pioneers) => {\n//     if (pioneers.length > 0) {\n//       const keywords = pioneers.map(pioneer => pioneer.nome);  // Usa os nomes como keywords\n//       const shuffled = keywords.sort(() => 0.5 - Math.random());  // Randomiza\n//       setRandomKeywords(shuffled.slice(0, 5));  // Seleciona 5 palavras aleatórias\n//     }\n//   };\n\n//   // Função de busca manual ao clicar no botão de pesquisa ou pressionar Enter\n//   const handleSearch = () => {\n//     const filtered = pioneers.filter(pioneer =>\n//       pioneer.nome.toLowerCase().includes(query.toLowerCase()) ||\n//       pioneer.descricao.toLowerCase().includes(query.toLowerCase())\n//     );\n//     setFilteredPioneers(filtered);\n//     setSuggestions([]);  // Limpa as sugestões após a busca\n//   };\n\n//   // Função para filtrar as sugestões conforme o usuário digita\n//   const handleInputChange = (e) => {\n//     const inputValue = e.target.value;\n//     setQuery(inputValue);\n\n//     // Filtra as sugestões com base no valor digitado\n//     if (inputValue.length > 0) {\n//       const filteredSuggestions = pioneers.filter(pioneer =>\n//         pioneer.nome.toLowerCase().includes(inputValue.toLowerCase())\n//       );\n//       setSuggestions(filteredSuggestions.slice(0, 10));  // Exibe no máximo 10 sugestões\n//     } else {\n//       setSuggestions([]);\n//     }\n//   };\n\n//   // Função chamada ao pressionar Enter\n//   const handleKeyDown = (e) => {\n//     if (e.key === 'Enter') {\n//       handleSearch();  // Realiza a busca ao pressionar Enter\n//     }\n//   };\n\n//   // Função chamada ao clicar em uma sugestão\n//   const handleSuggestionClick = (suggestion) => {\n//     setQuery(suggestion.nome);\n//     handleSearch();\n//   };\n\n//   // Função chamada ao clicar em uma tag de palavra-chave\n//   const handleKeywordClick = (keyword) => {\n//     setQuery(keyword);  // Define a busca com a palavra-chave clicada\n//     handleSearch();\n//   };\n\n//   return (\n//     <SearchWrapper>\n//       <SearchInput\n//         type=\"text\"\n//         value={query}\n//         onChange={handleInputChange}\n//         onKeyDown={handleKeyDown}  // Captura a tecla Enter\n//         placeholder=\"Digite sua pesquisa...\"\n//       />\n//       <SearchButton onClick={handleSearch}>Pesquisar</SearchButton>\n\n//       {/* Exibe as tags dinâmicas de exemplo */}\n//       <div>\n//         {randomKeywords.map((keyword, index) => (\n//           <Keyword\n//             key={index}\n//             onClick={() => handleKeywordClick(keyword)}\n//             color={colors[index % colors.length]}  // Cor dinamicamente atribuída\n//           >\n//             {keyword}\n//           </Keyword>\n//         ))}\n//       </div>\n\n//       {/* Exibe sugestões dinamicamente */}\n//       {suggestions.length > 0 && (\n//         <SuggestionsList>\n//           {suggestions.map((suggestion, index) => (\n//             <SuggestionItem\n//               key={index}\n//               onClick={() => handleSuggestionClick(suggestion)}\n//             >\n//               {suggestion.nome}\n//             </SuggestionItem>\n//           ))}\n//         </SuggestionsList>\n//       )}\n\n//       {/* Exibe os resultados da busca */}\n//       {filteredPioneers.length > 0 && (\n//         <ResultsWrapper>\n//           {filteredPioneers.map((pioneer) => (\n//             <ResultItem key={pioneer.nome}>\n//               <Nome>{pioneer.nome}</Nome>\n//               <Descricao>{pioneer.descricao}</Descricao>\n//               <Data>{pioneer.data}</Data>\n//             </ResultItem>\n//           ))}\n//         </ResultsWrapper>\n//       )}\n//     </SearchWrapper>\n//   );\n// }\n\n// export default SearchBar;","map":{"version":3,"names":[],"sources":["C:/Users/Inteli/Desktop/Fran_Dê/Projeto_Jefferson/search-system/src/components/SearchBar.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import styled from 'styled-components';\r\n\r\n// // Estilos para o wrapper da busca e header\r\n// const SearchWrapper = styled.div`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   margin-top: 150px;  /* Adiciona espaço para que a barra não fique atrás do header */\r\n// `;\r\n\r\n// const SearchInput = styled.input`\r\n//   width: 600px;\r\n//   padding: 15px;\r\n//   font-size: 18px;\r\n//   border: 2px solid #ddd;\r\n//   border-radius: 24px;\r\n//   margin-bottom: 20px;\r\n// `;\r\n\r\n// const SearchButton = styled.button`\r\n//   padding: 10px 20px;\r\n//   background-color: #4285f4;\r\n//   color: white;\r\n//   border: none;\r\n//   border-radius: 24px;\r\n//   cursor: pointer;\r\n//   font-size: 16px;\r\n//   margin-bottom: 20px;\r\n\r\n//   &:hover {\r\n//     background-color: #357ae8;\r\n//   }\r\n// `;\r\n\r\n// const ResultsWrapper = styled.div`\r\n//   width: 600px;\r\n//   margin-top: 20px;\r\n//   padding: 20px;\r\n//   border: 1px solid #ddd;\r\n//   border-radius: 10px;\r\n// `;\r\n\r\n// const ResultItem = styled.div`\r\n//   margin-bottom: 20px;\r\n//   border: 1px solid #ddd;\r\n//   border-radius: 5px;\r\n//   padding: 15px;\r\n// `;\r\n\r\n// const Nome = styled.h2`\r\n//   color: #1a73e8;\r\n//   margin: 0;\r\n// `;\r\n\r\n// const Descricao = styled.p`\r\n//   font-size: 14px;\r\n//   color: #333;\r\n// `;\r\n\r\n// const Data = styled.span`\r\n//   font-size: 12px;\r\n//   color: #777;\r\n// `;\r\n\r\n// const Keyword = styled.span`\r\n//   display: inline-block;\r\n//   background-color: ${props => props.color || '#f1f3f4'};  /* Cor dinâmica para cada tag */\r\n//   padding: 5px 10px;\r\n//   border-radius: 15px;\r\n//   margin-right: 5px;\r\n//   margin-bottom: 5px;\r\n//   font-size: 12px;\r\n//   cursor: pointer;\r\n//   color: white;\r\n\r\n//   &:hover {\r\n//     opacity: 0.8;\r\n//   }\r\n// `;\r\n\r\n// const SuggestionsList = styled.ul`\r\n//   list-style-type: none;\r\n//   padding: 0;\r\n//   margin-top: -10px;\r\n//   background-color: #fff;\r\n//   width: 600px;\r\n//   border: 1px solid #ddd;\r\n//   border-radius: 8px;\r\n//   max-height: 200px;\r\n//   overflow-y: auto;\r\n// `;\r\n\r\n// const SuggestionItem = styled.li`\r\n//   padding: 10px;\r\n//   cursor: pointer;\r\n//   &:hover {\r\n//     background-color: #f1f1f1;\r\n//   }\r\n// `;\r\n\r\n// function SearchBar() {\r\n//   const [query, setQuery] = useState('');\r\n//   const [pioneers, setPioneers] = useState([]);\r\n//   const [filteredPioneers, setFilteredPioneers] = useState([]);\r\n//   const [suggestions, setSuggestions] = useState([]);\r\n//   const [randomKeywords, setRandomKeywords] = useState([]);\r\n\r\n//   const colors = ['#34a853', '#ea4335', '#fbbc05', '#4285f4', '#f39c12'];  // Lista de cores para as tags\r\n\r\n//   // Carregar dados do JSON local\r\n//   useEffect(() => {\r\n//     fetch('/data/computing_pioneers.json')\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error('Erro ao carregar o arquivo JSON');\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setPioneers(data.pioneers);\r\n//         generateRandomKeywords(data.pioneers);  // Gera palavras-chave a partir do JSON\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error('Error loading JSON:', error);\r\n//       });\r\n//   }, []);\r\n\r\n//   // Função para gerar palavras-chave aleatórias a partir dos pioneiros\r\n//   const generateRandomKeywords = (pioneers) => {\r\n//     if (pioneers.length > 0) {\r\n//       const keywords = pioneers.map(pioneer => pioneer.nome);  // Usa os nomes como keywords\r\n//       const shuffled = keywords.sort(() => 0.5 - Math.random());  // Randomiza\r\n//       setRandomKeywords(shuffled.slice(0, 5));  // Seleciona 5 palavras aleatórias\r\n//     }\r\n//   };\r\n\r\n//   // Função de busca manual ao clicar no botão de pesquisa ou pressionar Enter\r\n//   const handleSearch = () => {\r\n//     const filtered = pioneers.filter(pioneer =>\r\n//       pioneer.nome.toLowerCase().includes(query.toLowerCase()) ||\r\n//       pioneer.descricao.toLowerCase().includes(query.toLowerCase())\r\n//     );\r\n//     setFilteredPioneers(filtered);\r\n//     setSuggestions([]);  // Limpa as sugestões após a busca\r\n//   };\r\n\r\n//   // Função para filtrar as sugestões conforme o usuário digita\r\n//   const handleInputChange = (e) => {\r\n//     const inputValue = e.target.value;\r\n//     setQuery(inputValue);\r\n\r\n//     // Filtra as sugestões com base no valor digitado\r\n//     if (inputValue.length > 0) {\r\n//       const filteredSuggestions = pioneers.filter(pioneer =>\r\n//         pioneer.nome.toLowerCase().includes(inputValue.toLowerCase())\r\n//       );\r\n//       setSuggestions(filteredSuggestions.slice(0, 10));  // Exibe no máximo 10 sugestões\r\n//     } else {\r\n//       setSuggestions([]);\r\n//     }\r\n//   };\r\n\r\n//   // Função chamada ao pressionar Enter\r\n//   const handleKeyDown = (e) => {\r\n//     if (e.key === 'Enter') {\r\n//       handleSearch();  // Realiza a busca ao pressionar Enter\r\n//     }\r\n//   };\r\n\r\n//   // Função chamada ao clicar em uma sugestão\r\n//   const handleSuggestionClick = (suggestion) => {\r\n//     setQuery(suggestion.nome);\r\n//     handleSearch();\r\n//   };\r\n\r\n//   // Função chamada ao clicar em uma tag de palavra-chave\r\n//   const handleKeywordClick = (keyword) => {\r\n//     setQuery(keyword);  // Define a busca com a palavra-chave clicada\r\n//     handleSearch();\r\n//   };\r\n\r\n//   return (\r\n//     <SearchWrapper>\r\n//       <SearchInput\r\n//         type=\"text\"\r\n//         value={query}\r\n//         onChange={handleInputChange}\r\n//         onKeyDown={handleKeyDown}  // Captura a tecla Enter\r\n//         placeholder=\"Digite sua pesquisa...\"\r\n//       />\r\n//       <SearchButton onClick={handleSearch}>Pesquisar</SearchButton>\r\n\r\n//       {/* Exibe as tags dinâmicas de exemplo */}\r\n//       <div>\r\n//         {randomKeywords.map((keyword, index) => (\r\n//           <Keyword\r\n//             key={index}\r\n//             onClick={() => handleKeywordClick(keyword)}\r\n//             color={colors[index % colors.length]}  // Cor dinamicamente atribuída\r\n//           >\r\n//             {keyword}\r\n//           </Keyword>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Exibe sugestões dinamicamente */}\r\n//       {suggestions.length > 0 && (\r\n//         <SuggestionsList>\r\n//           {suggestions.map((suggestion, index) => (\r\n//             <SuggestionItem\r\n//               key={index}\r\n//               onClick={() => handleSuggestionClick(suggestion)}\r\n//             >\r\n//               {suggestion.nome}\r\n//             </SuggestionItem>\r\n//           ))}\r\n//         </SuggestionsList>\r\n//       )}\r\n\r\n//       {/* Exibe os resultados da busca */}\r\n//       {filteredPioneers.length > 0 && (\r\n//         <ResultsWrapper>\r\n//           {filteredPioneers.map((pioneer) => (\r\n//             <ResultItem key={pioneer.nome}>\r\n//               <Nome>{pioneer.nome}</Nome>\r\n//               <Descricao>{pioneer.descricao}</Descricao>\r\n//               <Data>{pioneer.data}</Data>\r\n//             </ResultItem>\r\n//           ))}\r\n//         </ResultsWrapper>\r\n//       )}\r\n//     </SearchWrapper>\r\n//   );\r\n// }\r\n\r\n// export default SearchBar;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}