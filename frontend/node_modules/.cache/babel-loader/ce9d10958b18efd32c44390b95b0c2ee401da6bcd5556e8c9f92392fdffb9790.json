{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Inteli\\\\Desktop\\\\Fran_D\\xEA\\\\Projeto_Jefferson\\\\search-system\\\\src\\\\components\\\\SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { buscarTrabalhos } from '../api'; // Importa a função da API\n\n// Estilos (mantêm os mesmos que você já criou)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-top: 150px;\n`;\n_c = SearchWrapper;\nconst SearchInput = styled.input`\n  width: 600px;\n  padding: 15px;\n  font-size: 18px;\n  border: 2px solid #ddd;\n  border-radius: 24px;\n  margin-bottom: 20px;\n`;\n_c2 = SearchInput;\nconst SearchButton = styled.button`\n  padding: 10px 20px;\n  background-color: #4285f4;\n  color: white;\n  border: none;\n  border-radius: 24px;\n  cursor: pointer;\n  font-size: 16px;\n\n  &:hover {\n    background-color: #357ae8;\n  }\n`;\n_c3 = SearchButton;\nfunction SearchBar({\n  onResults\n}) {\n  _s();\n  const [query, setQuery] = useState(''); // Estado do input\n  const [loading, setLoading] = useState(false); // Estado de carregamento\n  const [error, setError] = useState(null); // Estado de erro\n\n  // Função de busca\n  const handleSearch = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const params = {}; // Cria um objeto para armazenar os parâmetros\n\n      if (query) {\n        params.palavra_resumo = query; // Usa o input como filtro\n      }\n      const resultados = await buscarTrabalhos(params); // Chama a API\n      onResults(resultados); // Envia os resultados para o componente pai\n    } catch (err) {\n      setError('Erro ao buscar trabalhos. Tente novamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SearchWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n      type: \"text\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Digite sua busca (ex.: dignidade, previd\\xEAncia)...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchButton, {\n      onClick: handleSearch,\n      disabled: loading,\n      children: loading ? 'Buscando...' : 'Pesquisar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchBar, \"s/QqPjYQri18KslbTNffvi3o13M=\");\n_c4 = SearchBar;\nexport default SearchBar;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SearchWrapper\");\n$RefreshReg$(_c2, \"SearchInput\");\n$RefreshReg$(_c3, \"SearchButton\");\n$RefreshReg$(_c4, \"SearchBar\");","map":{"version":3,"names":["React","useState","styled","buscarTrabalhos","jsxDEV","_jsxDEV","SearchWrapper","div","_c","SearchInput","input","_c2","SearchButton","button","_c3","SearchBar","onResults","_s","query","setQuery","loading","setLoading","error","setError","handleSearch","params","palavra_resumo","resultados","err","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","_c4","$RefreshReg$"],"sources":["C:/Users/Inteli/Desktop/Fran_Dê/Projeto_Jefferson/search-system/src/components/SearchBar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { buscarTrabalhos } from '../api'; // Importa a função da API\r\n\r\n// Estilos (mantêm os mesmos que você já criou)\r\nconst SearchWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 150px;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  width: 600px;\r\n  padding: 15px;\r\n  font-size: 18px;\r\n  border: 2px solid #ddd;\r\n  border-radius: 24px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  padding: 10px 20px;\r\n  background-color: #4285f4;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n\r\n  &:hover {\r\n    background-color: #357ae8;\r\n  }\r\n`;\r\n\r\nfunction SearchBar({ onResults }) {\r\n  const [query, setQuery] = useState(''); // Estado do input\r\n  const [loading, setLoading] = useState(false); // Estado de carregamento\r\n  const [error, setError] = useState(null); // Estado de erro\r\n\r\n  // Função de busca\r\n  const handleSearch = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const params = {}; // Cria um objeto para armazenar os parâmetros\r\n\r\n      if (query) {\r\n        params.palavra_resumo = query; // Usa o input como filtro\r\n      }\r\n\r\n      const resultados = await buscarTrabalhos(params); // Chama a API\r\n      onResults(resultados); // Envia os resultados para o componente pai\r\n    } catch (err) {\r\n      setError('Erro ao buscar trabalhos. Tente novamente.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchWrapper>\r\n      <SearchInput\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        placeholder=\"Digite sua busca (ex.: dignidade, previdência)...\"\r\n      />\r\n      <SearchButton onClick={handleSearch} disabled={loading}>\r\n        {loading ? 'Buscando...' : 'Pesquisar'}\r\n      </SearchButton>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </SearchWrapper>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}